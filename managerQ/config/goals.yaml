# /managerQ/config/goals.yaml
- goal_id: "goal_cpu_remediation"
  objective: "Ensure no service exceeds 80% CPU utilization for a sustained period."
  is_active: true
  conditions:
    - service: "*" # Wildcard for all services
      metric: "cpu_utilization_percent"
      operator: ">"
      value: 80
      duration_minutes: 5
  # This workflow must be pre-loaded into the Ignite 'workflows' cache
  remediation_workflow_id: "wf_root_cause_analysis"
  context_overrides:
    # The 'failed_condition' object is automatically injected by the GoalMonitor
    # when a condition is met. We map the service name from that object into
    # the context of the RCA workflow.
    service_name: "{{ failed_condition.service }}"

- goal_id: "goal_fix_scenario_typo_on_startup"
  objective: "Correct the generic objective in the proactive scaling scenario to be more specific."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_fix_scenario_typo"

- goal_id: "goal_tdd_refactor_example_utils"
  objective: "Refactor the example_utils.py file for clarity and verify with tests."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_test_driven_development"
  # Override the default context in the workflow template
  context_overrides:
    source_file: "agentQ/app/core/example_utils.py"
    test_command: "python -m unittest agentQ/tests/test_example_utils.py"
    refactor_request: "The function 'add_numbers' is too verbose. Refactor it to be a single line and remove the unnecessary comment."

- goal_id: "goal_hierarchical_onboarding_on_startup"
  objective: "Demonstrate hierarchical planning by kicking off the developer onboarding workflow."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_hierarchical_onboarding"

- goal_id: "goal_self_healing_demo_on_startup"
  objective: "Demonstrate self-healing by triaging and fixing a simulated bug report."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_triage_bug_report"
  context_overrides:
    trigger:
      payload:
        prompt: "The add_numbers function in example_utils.py is not returning the correct sum for negative numbers."
        source_id: "openproject-456" # Simulated OpenProject ticket ID
    # This context needs to be available to the sub-workflow as well.
    # A more robust system would handle this propagation automatically.
    # For now, we will assume the TDD workflow has the correct defaults.
    repo: "your-github-org/your-repo-name" # This needs to be configured

- goal_id: "goal_ast_refactor_on_startup"
  objective: "Demonstrate AST-based refactoring by renaming a variable and verifying with linter and tests."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_ast_refactor_and_lint"

- goal_id: "goal_security_scan_on_startup"
  objective: "Run a comprehensive SAST scan on all service codebases at startup."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_security_code_scan"

- goal_id: "goal_quantum_routing_on_startup"
  objective: "Optimize LLM provider routing by running the quantum optimization workflow at startup."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_quantum_llm_routing"

- goal_id: "goal_finops_scan_on_startup"
  objective: "Run a daily FinOps scan to monitor for cost anomalies."
  is_active: true
  trigger:
    type: "on_startup" # In production, this would be a time-based trigger
  remediation_workflow_id: "wf_finops_daily_scan"

- goal_id: "goal_predictive_scaling_on_startup"
  objective: "Proactively scale services based on load forecasts."
  is_active: true
  trigger:
    type: "on_startup" # In production, this would be a time-based trigger (e.g., every 15 minutes)
  remediation_workflow_id: "wf_predictive_scaling"

- goal_id: "goal_neuromorphic_monitoring_on_startup"
  objective: "Activate the neuromorphic anomaly detection system to monitor the live market data stream."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_neuromorphic_market_monitoring"

- goal_id: "goal_strategic_analysis_on_startup"
  objective: "Activate the Chief Scientist agent to perform a cross-domain strategic analysis of the platform."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_strategic_quarterly_analysis"

- goal_id: "goal_autonomous_ventures_on_startup"
  objective: "Activate the VC agent to begin seeking and executing profitable ventures."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_autonomous_venture_creation"

- goal_id: "goal_proactive_assistance_on_startup"
  objective: "Activate the Chief of Staff agent to provide proactive assistance to users."
  is_active: true
  trigger:
    type: "on_startup"
  remediation_workflow_id: "wf_proactive_assistance"

- goal_id: "goal_zero_day_vulnerability_response"
  objective: "A critical zero-day vulnerability has been announced for the 'log4j' library. Form a squad to assess our exposure, patch all affected services, and document the response."
  is_active: true
  trigger:
    type: "on_startup" # This is for demonstration; in production, this would be triggered by an external event.
  # This goal is intentionally routed to the planner agent, as it's too complex
  # for a single, predefined workflow. The planner must form a squad.
  remediation_workflow_id: "wf_delegate_to_planner" 
  context_overrides:
    # The planner agent receives this as its high-level prompt.
    prompt: "A critical zero-day vulnerability has been announced for the 'log4j' library. Your task is to orchestrate a full response. This includes assessing which services use the library, coordinating a patch, and ensuring the incident is documented. You must form a multi-disciplinary squad to handle this."

# --- Pre-defined Remediation Workflows ---
# This is a conceptual representation of a workflow that would be loaded into Ignite.
# ID: wf_auto_scale_service
# Tasks:
#   - task_id: "task_1"
#     agent_personality: "devops"
#     prompt: "The service '{{ failed_condition.service }}' has breached its CPU threshold. Scale it up by one replica using the `increase_service_replicas` tool."
#     dependencies: [] 