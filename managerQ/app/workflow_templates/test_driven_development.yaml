workflow_id: "wf_test_driven_development"
original_prompt: "Refactor the specified file and ensure all tests pass."
shared_context:
  source_file: "path/to/your/source_file.py"
  test_file_path: "path/to/your/tests/test_file.py"
  test_command: "pytest path/to/your/tests/ --cov={{ shared_context.source_file }} --cov-report=term-missing"
  refactor_request: "Please refactor the 'calculate_total' function for clarity."
  function_to_test: "calculate_total"

tasks:
  - task_id: "read_source_code"
    type: "task"
    agent_personality: "default"
    prompt: "Read the full content of the file at '{{ shared_context.source_file }}'."
    dependencies: []

  - task_id: "attempt_first_refactor"
    type: "task"
    agent_personality: "default"
    prompt: |
      Based on the refactor request: "{{ shared_context.refactor_request }}",
      Modify the following code:
      ---
      {{ tasks.read_source_code.result }}
      ---
      Your output for this task MUST be ONLY the complete, new source code for the file.
    dependencies:
      - "read_source_code"
  
  - task_id: "save_initial_code"
    type: "task"
    agent_personality: "default"
    prompt: "Write the following content to '{{ shared_context.source_file }}':\n\n{{ tasks.attempt_first_refactor.result }}"
    dependencies: ["attempt_first_refactor"]

  - task_id: "run_initial_static_analysis"
    type: "task"
    agent_personality: "default"
    prompt: "Run the linter on the file '{{ shared_context.source_file }}' and return the analysis results."
    dependencies: ["save_initial_code"]

  - task_id: "run_initial_tests"
    type: "task"
    agent_personality: "default"
    prompt: "Execute the command: '{{ shared_context.test_command }}'."
    dependencies: ["run_initial_static_analysis"]

  - task_id: "test_and_fix_loop"
    type: "conditional"
    dependencies: ["run_initial_tests", "run_initial_static_analysis"]
    branches:
      # Continue if tests pass and no linter issues
      - condition: "{{ 'Exit Code: 0' in tasks.run_initial_tests.result and 'issues_found' not in tasks.run_initial_static_analysis.result }}"
        tasks:
          - task_id: "tests_passed"
            type: "task"
            agent_personality: "default"
            prompt: "Tests passed successfully. Code is ready for finalization."
            dependencies: []
      
      # Fix issues if tests fail or linter finds problems
      - condition: "{{ 'Exit Code: 0' not in tasks.run_initial_tests.result or 'issues_found' in tasks.run_initial_static_analysis.result }}"
        tasks:
          - task_id: "attempt_fix_iteration_1"
            type: "task"
            agent_personality: "default"
            prompt: |
              The tests failed or the linter found issues.
              
              Linter output:
              ---
              {{ tasks.run_initial_static_analysis.result }}
              ---
              
              Test output:
              ---
              {{ tasks.run_initial_tests.result }}
              ---
              
              Based on this feedback, provide a corrected version of the source code.
              Your last attempt was:
              ---
              {{ tasks.attempt_first_refactor.result }}
              ---
              Your output for this task MUST be ONLY the complete, new, corrected source code for the file.
            dependencies: []

          - task_id: "save_fixed_code_1"
            type: "task"
            agent_personality: "default"
            prompt: "Write the following content to '{{ shared_context.source_file }}':\n\n{{ tasks.attempt_fix_iteration_1.result }}"
            dependencies: ["attempt_fix_iteration_1"]

          - task_id: "run_static_analysis_1"
            type: "task"
            agent_personality: "default"
            prompt: "Run the linter on the file '{{ shared_context.source_file }}' and return the analysis results."
            dependencies: ["save_fixed_code_1"]

          - task_id: "run_tests_1"
            type: "task"
            agent_personality: "default"
            prompt: "Execute the command: '{{ shared_context.test_command }}'."
            dependencies: ["run_static_analysis_1"]

          - task_id: "check_iteration_1"
            type: "conditional"
            dependencies: ["run_tests_1", "run_static_analysis_1"]
            branches:
              - condition: "{{ 'Exit Code: 0' in tasks.run_tests_1.result and 'issues_found' not in tasks.run_static_analysis_1.result }}"
                tasks:
                  - task_id: "tests_passed_1"
                    type: "task"
                    agent_personality: "default"
                    prompt: "Tests passed after first fix iteration."
                    dependencies: []
              
              - condition: "{{ 'Exit Code: 0' not in tasks.run_tests_1.result or 'issues_found' in tasks.run_static_analysis_1.result }}"
                tasks:
                  - task_id: "attempt_fix_iteration_2"
                    type: "task"
                    agent_personality: "default"
                    prompt: |
                      Second attempt at fixing the code.
                      
                      Linter output:
                      ---
                      {{ tasks.run_static_analysis_1.result }}
                      ---
                      
                      Test output:
                      ---
                      {{ tasks.run_tests_1.result }}
                      ---
                      
                      Based on this feedback, provide a corrected version of the source code.
                      Your last attempt was:
                      ---
                      {{ tasks.attempt_fix_iteration_1.result }}
                      ---
                      Your output for this task MUST be ONLY the complete, new, corrected source code for the file.
                    dependencies: []

                  - task_id: "save_fixed_code_2"
                    type: "task"
                    agent_personality: "default"
                    prompt: "Write the following content to '{{ shared_context.source_file }}':\n\n{{ tasks.attempt_fix_iteration_2.result }}"
                    dependencies: ["attempt_fix_iteration_2"]

                  - task_id: "run_static_analysis_2"
                    type: "task"
                    agent_personality: "default"
                    prompt: "Run the linter on the file '{{ shared_context.source_file }}' and return the analysis results."
                    dependencies: ["save_fixed_code_2"]

                  - task_id: "run_tests_2"
                    type: "task"
                    agent_personality: "default"
                    prompt: "Execute the command: '{{ shared_context.test_command }}'."
                    dependencies: ["run_static_analysis_2"]

                  - task_id: "final_check"
                    type: "conditional"
                    dependencies: ["run_tests_2", "run_static_analysis_2"]
                    branches:
                      - condition: "{{ 'Exit Code: 0' in tasks.run_tests_2.result and 'issues_found' not in tasks.run_static_analysis_2.result }}"
                        tasks:
                          - task_id: "tests_passed_final"
                            type: "task"
                            agent_personality: "default"
                            prompt: "Tests passed after second fix iteration."
                            dependencies: []
                      
                      - condition: "true"
                        tasks:
                          - task_id: "max_iterations_reached"
                            type: "task"
                            agent_personality: "default"
                            prompt: "Maximum fix iterations reached. Manual intervention may be required."
                            dependencies: []

  - task_id: "run_tests_with_coverage"
    type: "task"
    agent_personality: "default"
    prompt: "Execute the final coverage test using command: '{{ shared_context.test_command }}'."
    dependencies: ["test_and_fix_loop"]

  - task_id: "generate_new_tests"
    type: "task"
    agent_personality: "default"
    prompt: "Generate a new test for the function '{{ shared_context.function_to_test }}' in the file '{{ shared_context.source_file }}' to improve test coverage."
    dependencies: ["run_tests_with_coverage"]

  - task_id: "save_new_test"
    type: "task"
    agent_personality: "default"
    prompt: "Append the following content to '{{ shared_context.test_file_path }}':\n\n{{ tasks.generate_new_tests.result }}"
    dependencies: ["generate_new_tests"]

  - task_id: "determine_final_code"
    type: "conditional"
    dependencies: ["test_and_fix_loop"]
    branches:
      - condition: "{{ tasks.get('tests_passed_final') }}"
        tasks:
          - task_id: "get_final_code_iteration_2"
            type: "task"
            agent_personality: "default"
            prompt: "Final code is from iteration 2: {{ tasks.attempt_fix_iteration_2.result }}"
            dependencies: []
      - condition: "{{ tasks.get('tests_passed_1') }}"
        tasks:
          - task_id: "get_final_code_iteration_1"
            type: "task"
            agent_personality: "default"
            prompt: "Final code is from iteration 1: {{ tasks.attempt_fix_iteration_1.result }}"
            dependencies: []
      - condition: "{{ tasks.get('tests_passed') }}"
        tasks:
          - task_id: "get_final_code_initial"
            type: "task"
            agent_personality: "default"
            prompt: "Final code is from initial refactor: {{ tasks.attempt_first_refactor.result }}"
            dependencies: []
      - condition: "true"
        tasks:
          - task_id: "get_final_code_fallback"
            type: "task"
            agent_personality: "default"
            prompt: "Using initial refactor as fallback: {{ tasks.attempt_first_refactor.result }}"
            dependencies: []

  - task_id: "create_git_branch"
    type: "task"
    agent_personality: "devops"
    prompt: "Create a new branch named 'agent-fix/{{ workflow.workflow_id }}' in the repository."
    dependencies: ["save_new_test", "determine_final_code"]

  - task_id: "commit_changes"
    type: "task"
    agent_personality: "devops"
    prompt: |
      Commit the successfully tested code to the new branch.
      Branch: 'agent-fix/{{ workflow.workflow_id }}'
      File Path: '{{ shared_context.source_file }}'
      Commit Message: 'Fix: Automated refactor by AgentQ - {{ shared_context.refactor_request }}'
      
      Use the final code from the test_and_fix_loop process.
    dependencies: ["create_git_branch"]

  - task_id: "create_pull_request"
    type: "task"
    agent_personality: "devops"
    prompt: |
      Create a pull request for the changes.
      Head Branch: 'agent-fix/{{ workflow.workflow_id }}'
      Base Branch: 'main'
      Title: 'Automated Refactor: {{ shared_context.refactor_request }}'
      Body: |
        This pull request was automatically generated by AgentQ to address the goal: "{{ workflow.original_prompt }}". 
        
        **Test Results:**
        All tests have passed after the refactoring process.
        
        **Coverage Report:**
        ```
        {{ tasks.run_tests_with_coverage.result }}
        ```
        
        **Changes Made:**
        - Refactored '{{ shared_context.function_to_test }}' function
        - Added new test cases for improved coverage
        - Ensured all linting standards are met
    dependencies: ["commit_changes"] 