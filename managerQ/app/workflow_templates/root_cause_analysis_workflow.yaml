workflow_id: "wf_root_cause_analysis"
original_prompt: "A service is exhibiting anomalous behavior. Perform a root cause analysis by gathering and correlating metrics, logs, and events."
shared_context:
  # These values will be injected by the goal that triggers the workflow
  service_name: "unknown-service"
  namespace: "q-platform"
  time_window_minutes: "15"

tasks:
  - task_id: "gather_metrics"
    type: "task"
    agent_personality: "devops"
    prompt: |
      The service '{{ shared_context.service_name }}' in namespace '{{ shared_context.namespace }}' is showing anomalies.
      Query Prometheus for the following key metrics over the last {{ shared_context.time_window_minutes }} minutes:
      - CPU Utilization (container_cpu_usage_seconds_total)
      - Memory Usage (container_memory_working_set_bytes)
      - Restart Count (kube_pod_container_status_restarts_total)
      - Network I/O (container_network_receive_bytes_total, container_network_transmit_bytes_total)
      
      Use the `prometheus_query_range` tool for each metric.
    dependencies: []

  - task_id: "gather_logs"
    type: "task"
    agent_personality: "data_analyst"
    prompt: |
      The service '{{ shared_context.service_name }}' in namespace '{{ shared_context.namespace }}' is showing anomalies.
      Query Elasticsearch for logs from this service over the last {{ shared_context.time_window_minutes }} minutes.
      Search for logs with levels ERROR, CRITICAL, or FATAL. Also, search for any occurrences of the phrase 'OOMKilled' or 'CrashLoopBackOff'.
      
      Use the `elasticsearch_query` tool.
    dependencies: []

  - task_id: "gather_k8s_events"
    type: "task"
    agent_personality: "devops"
    prompt: |
      The service '{{ shared_context.service_name }}' in namespace '{{ shared_context.namespace }}' is showing anomalies.
      Use the `kubernetes_get_events` tool to fetch all events related to this service from the last {{ shared_context.time_window_minutes }} minutes.
      Pay special attention to events with a 'Warning' type.
    dependencies: []

  - task_id: "synthesize_findings"
    type: "task"
    agent_personality: "reflector"
    prompt: |
      You have been provided with data from three sources for the service '{{ shared_context.service_name }}':
      1. **Metrics**: {{ tasks.gather_metrics.result }}
      2. **Logs**: {{ tasks.gather_logs.result }}
      3. **Kubernetes Events**: {{ tasks.gather_k8s_events.result }}

      Analyze and correlate all of this information to determine the probable root cause of the issue.
      Your analysis should be structured with the following sections:
      - **Summary**: A one-sentence summary of the probable root cause.
      - **Evidence**: A bulleted list of the key findings from metrics, logs, and events that support your conclusion.
      - **Recommendation**: A suggested next step for remediation.

      In addition to the markdown report, you MUST output a JSON object containing a `remediation_plan`.
      The plan should have `tool_name` and `parameters`. For example:
      ```json
      {
        "remediation_plan": {
          "tool_name": "k8s_restart_deployment",
          "parameters": {
            "service_name": "{{ shared_context.service_name }}",
            "namespace": "{{ shared_context.namespace }}"
          }
        }
      }
      ```
    dependencies: ["gather_metrics", "gather_logs", "gather_k8s_events"]

  - task_id: "request_remediation_approval"
    type: "approval"
    message: "The AIOps system has diagnosed an issue with the '{{ shared_context.service_name }}' service and recommends the following action: `{{ tasks.synthesize_findings.result.remediation_plan.tool_name }}`. Please approve or reject this plan."
    dependencies: ["synthesize_findings"]
    required_roles: ["sre", "lead_dev"]

  - task_id: "execute_remediation"
    type: "task"
    agent_personality: "devops"
    # This prompt uses the machine-readable output from the synthesis task
    prompt: |
      The remediation plan has been approved.
      Execute the tool `{{ tasks.synthesize_findings.result.remediation_plan.tool_name }}`
      with the parameters `{{ tasks.synthesize_findings.result.remediation_plan.parameters }}`.
    dependencies: ["request_remediation_approval"]
    condition: "{{ tasks.request_remediation_approval.result == 'approved' }}" 